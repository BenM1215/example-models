// Code generated by Stan version 2.14

#include <stan/model/model_header.hpp>

namespace LinTwoCptModel_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

class LinTwoCptModel_model : public prob_grad {
private:
    int nt;
    int nObs;
    vector<int> iObs;
    vector<int> cmt;
    vector<int> evid;
    vector<int> addl;
    vector<int> ss;
    vector<double> amt;
    vector<double> time;
    vector<double> rate;
    vector<double> ii;
    vector_d cObs;
    vector_d logCObs;
    int nCmt;
    vector<double> biovar;
    vector<double> tlag;
public:
    LinTwoCptModel_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        typedef boost::ecuyer1988 rng_t;
        rng_t base_rng(0);  // 0 seed default
        ctor_body(context__, base_rng, pstream__);
    }

    template <class RNG>
    LinTwoCptModel_model(stan::io::var_context& context__,
        RNG& base_rng__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, base_rng__, pstream__);
    }

    template <class RNG>
    void ctor_body(stan::io::var_context& context__,
                   RNG& base_rng__,
                   std::ostream* pstream__) {
        current_statement_begin__ = -1;

        static const char* function__ = "LinTwoCptModel_model_namespace::LinTwoCptModel_model";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "nt", "int", context__.to_vec());
        nt = int(0);
        vals_i__ = context__.vals_i("nt");
        pos__ = 0;
        nt = vals_i__[pos__++];
        context__.validate_dims("data initialization", "nObs", "int", context__.to_vec());
        nObs = int(0);
        vals_i__ = context__.vals_i("nObs");
        pos__ = 0;
        nObs = vals_i__[pos__++];
        context__.validate_dims("data initialization", "iObs", "int", context__.to_vec(nObs));
        validate_non_negative_index("iObs", "nObs", nObs);
        iObs = std::vector<int>(nObs,int(0));
        vals_i__ = context__.vals_i("iObs");
        pos__ = 0;
        size_t iObs_limit_0__ = nObs;
        for (size_t i_0__ = 0; i_0__ < iObs_limit_0__; ++i_0__) {
            iObs[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "cmt", "int", context__.to_vec(nt));
        validate_non_negative_index("cmt", "nt", nt);
        cmt = std::vector<int>(nt,int(0));
        vals_i__ = context__.vals_i("cmt");
        pos__ = 0;
        size_t cmt_limit_0__ = nt;
        for (size_t i_0__ = 0; i_0__ < cmt_limit_0__; ++i_0__) {
            cmt[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "evid", "int", context__.to_vec(nt));
        validate_non_negative_index("evid", "nt", nt);
        evid = std::vector<int>(nt,int(0));
        vals_i__ = context__.vals_i("evid");
        pos__ = 0;
        size_t evid_limit_0__ = nt;
        for (size_t i_0__ = 0; i_0__ < evid_limit_0__; ++i_0__) {
            evid[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "addl", "int", context__.to_vec(nt));
        validate_non_negative_index("addl", "nt", nt);
        addl = std::vector<int>(nt,int(0));
        vals_i__ = context__.vals_i("addl");
        pos__ = 0;
        size_t addl_limit_0__ = nt;
        for (size_t i_0__ = 0; i_0__ < addl_limit_0__; ++i_0__) {
            addl[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "ss", "int", context__.to_vec(nt));
        validate_non_negative_index("ss", "nt", nt);
        ss = std::vector<int>(nt,int(0));
        vals_i__ = context__.vals_i("ss");
        pos__ = 0;
        size_t ss_limit_0__ = nt;
        for (size_t i_0__ = 0; i_0__ < ss_limit_0__; ++i_0__) {
            ss[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "amt", "double", context__.to_vec(nt));
        validate_non_negative_index("amt", "nt", nt);
        amt = std::vector<double>(nt,double(0));
        vals_r__ = context__.vals_r("amt");
        pos__ = 0;
        size_t amt_limit_0__ = nt;
        for (size_t i_0__ = 0; i_0__ < amt_limit_0__; ++i_0__) {
            amt[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "time", "double", context__.to_vec(nt));
        validate_non_negative_index("time", "nt", nt);
        time = std::vector<double>(nt,double(0));
        vals_r__ = context__.vals_r("time");
        pos__ = 0;
        size_t time_limit_0__ = nt;
        for (size_t i_0__ = 0; i_0__ < time_limit_0__; ++i_0__) {
            time[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "rate", "double", context__.to_vec(nt));
        validate_non_negative_index("rate", "nt", nt);
        rate = std::vector<double>(nt,double(0));
        vals_r__ = context__.vals_r("rate");
        pos__ = 0;
        size_t rate_limit_0__ = nt;
        for (size_t i_0__ = 0; i_0__ < rate_limit_0__; ++i_0__) {
            rate[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "ii", "double", context__.to_vec(nt));
        validate_non_negative_index("ii", "nt", nt);
        ii = std::vector<double>(nt,double(0));
        vals_r__ = context__.vals_r("ii");
        pos__ = 0;
        size_t ii_limit_0__ = nt;
        for (size_t i_0__ = 0; i_0__ < ii_limit_0__; ++i_0__) {
            ii[i_0__] = vals_r__[pos__++];
        }
        validate_non_negative_index("cObs", "nObs", nObs);
        cObs = vector_d(static_cast<Eigen::VectorXd::Index>(nObs));
        context__.validate_dims("data initialization", "cObs", "vector_d", context__.to_vec(nObs));
        vals_r__ = context__.vals_r("cObs");
        pos__ = 0;
        size_t cObs_i_vec_lim__ = nObs;
        for (size_t i_vec__ = 0; i_vec__ < cObs_i_vec_lim__; ++i_vec__) {
            cObs[i_vec__] = vals_r__[pos__++];
        }

        // validate, data variables
        check_greater_or_equal(function__,"nt",nt,1);
        check_greater_or_equal(function__,"nObs",nObs,1);
        for (int k0__ = 0; k0__ < nObs; ++k0__) {
            check_greater_or_equal(function__,"iObs[k0__]",iObs[k0__],1);
        }
        for (int k0__ = 0; k0__ < nt; ++k0__) {
            check_greater_or_equal(function__,"cmt[k0__]",cmt[k0__],1);
        }
        check_greater_or_equal(function__,"cObs",cObs,0);
        // initialize data variables
        validate_non_negative_index("logCObs", "nObs", nObs);
        logCObs = vector_d(static_cast<Eigen::VectorXd::Index>(nObs));
        stan::math::fill(logCObs,DUMMY_VAR__);
        stan::math::assign(logCObs,log(cObs));
        nCmt = int(0);
        stan::math::fill(nCmt, std::numeric_limits<int>::min());
        stan::math::assign(nCmt,3);
        validate_non_negative_index("biovar", "nCmt", nCmt);
        biovar = std::vector<double>(nCmt,double(0));
        stan::math::fill(biovar,DUMMY_VAR__);
        validate_non_negative_index("tlag", "nCmt", nCmt);
        tlag = std::vector<double>(nCmt,double(0));
        stan::math::fill(tlag,DUMMY_VAR__);

        try {
            current_statement_begin__ = 29;
            for (int i = 1; i <= nCmt; ++i) {

                current_statement_begin__ = 30;
                stan::math::assign(get_base1_lhs(biovar,i,"biovar",1), 1);
                current_statement_begin__ = 31;
                stan::math::assign(get_base1_lhs(tlag,i,"tlag",1), 0);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
    }

    ~LinTwoCptModel_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("CL")))
            throw std::runtime_error("variable CL missing");
        vals_r__ = context__.vals_r("CL");
        pos__ = 0U;
        context__.validate_dims("initialization", "CL", "double", context__.to_vec());
        // generate_declaration CL
        double CL(0);
        CL = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,CL);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable CL: ") + e.what());
        }

        if (!(context__.contains_r("Q")))
            throw std::runtime_error("variable Q missing");
        vals_r__ = context__.vals_r("Q");
        pos__ = 0U;
        context__.validate_dims("initialization", "Q", "double", context__.to_vec());
        // generate_declaration Q
        double Q(0);
        Q = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,Q);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable Q: ") + e.what());
        }

        if (!(context__.contains_r("V1")))
            throw std::runtime_error("variable V1 missing");
        vals_r__ = context__.vals_r("V1");
        pos__ = 0U;
        context__.validate_dims("initialization", "V1", "double", context__.to_vec());
        // generate_declaration V1
        double V1(0);
        V1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,V1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable V1: ") + e.what());
        }

        if (!(context__.contains_r("V2")))
            throw std::runtime_error("variable V2 missing");
        vals_r__ = context__.vals_r("V2");
        pos__ = 0U;
        context__.validate_dims("initialization", "V2", "double", context__.to_vec());
        // generate_declaration V2
        double V2(0);
        V2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,V2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable V2: ") + e.what());
        }

        if (!(context__.contains_r("ka")))
            throw std::runtime_error("variable ka missing");
        vals_r__ = context__.vals_r("ka");
        pos__ = 0U;
        context__.validate_dims("initialization", "ka", "double", context__.to_vec());
        // generate_declaration ka
        double ka(0);
        ka = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,ka);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable ka: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma", "double", context__.to_vec());
        // generate_declaration sigma
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ CL;
        (void) CL;  // dummy to suppress unused var warning
        if (jacobian__)
            CL = in__.scalar_lb_constrain(0,lp__);
        else
            CL = in__.scalar_lb_constrain(0);

        T__ Q;
        (void) Q;  // dummy to suppress unused var warning
        if (jacobian__)
            Q = in__.scalar_lb_constrain(0,lp__);
        else
            Q = in__.scalar_lb_constrain(0);

        T__ V1;
        (void) V1;  // dummy to suppress unused var warning
        if (jacobian__)
            V1 = in__.scalar_lb_constrain(0,lp__);
        else
            V1 = in__.scalar_lb_constrain(0);

        T__ V2;
        (void) V2;  // dummy to suppress unused var warning
        if (jacobian__)
            V2 = in__.scalar_lb_constrain(0,lp__);
        else
            V2 = in__.scalar_lb_constrain(0);

        T__ ka;
        (void) ka;  // dummy to suppress unused var warning
        if (jacobian__)
            ka = in__.scalar_lb_constrain(0,lp__);
        else
            ka = in__.scalar_lb_constrain(0);

        T__ sigma;
        (void) sigma;  // dummy to suppress unused var warning
        if (jacobian__)
            sigma = in__.scalar_lb_constrain(0,lp__);
        else
            sigma = in__.scalar_lb_constrain(0);


        // transformed parameters
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  K(static_cast<Eigen::VectorXd::Index>(3),static_cast<Eigen::VectorXd::Index>(3));
        (void) K;  // dummy to suppress unused var warning
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K,DUMMY_VAR__);
        T__ k10;
        (void) k10;  // dummy to suppress unused var warning
        stan::math::initialize(k10, DUMMY_VAR__);
        stan::math::fill(k10,DUMMY_VAR__);
        stan::math::assign(k10,(CL / V1));
        T__ k12;
        (void) k12;  // dummy to suppress unused var warning
        stan::math::initialize(k12, DUMMY_VAR__);
        stan::math::fill(k12,DUMMY_VAR__);
        stan::math::assign(k12,(Q / V1));
        T__ k21;
        (void) k21;  // dummy to suppress unused var warning
        stan::math::initialize(k21, DUMMY_VAR__);
        stan::math::fill(k21,DUMMY_VAR__);
        stan::math::assign(k21,(Q / V2));
        Eigen::Matrix<T__,Eigen::Dynamic,1>  cHat(static_cast<Eigen::VectorXd::Index>(nt));
        (void) cHat;  // dummy to suppress unused var warning
        stan::math::initialize(cHat, DUMMY_VAR__);
        stan::math::fill(cHat,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  cHatObs(static_cast<Eigen::VectorXd::Index>(nObs));
        (void) cHatObs;  // dummy to suppress unused var warning
        stan::math::initialize(cHatObs, DUMMY_VAR__);
        stan::math::fill(cHatObs,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  x(static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(3));
        (void) x;  // dummy to suppress unused var warning
        stan::math::initialize(x, DUMMY_VAR__);
        stan::math::fill(x,DUMMY_VAR__);


        try {
            current_statement_begin__ = 54;
            stan::math::assign(K, rep_matrix(0,3,3));
            current_statement_begin__ = 56;
            stan::math::assign(get_base1_lhs(K,1,1,"K",1), -(ka));
            current_statement_begin__ = 57;
            stan::math::assign(get_base1_lhs(K,2,1,"K",1), ka);
            current_statement_begin__ = 58;
            stan::math::assign(get_base1_lhs(K,2,2,"K",1), -((k10 + k12)));
            current_statement_begin__ = 59;
            stan::math::assign(get_base1_lhs(K,2,3,"K",1), k21);
            current_statement_begin__ = 60;
            stan::math::assign(get_base1_lhs(K,3,2,"K",1), k12);
            current_statement_begin__ = 61;
            stan::math::assign(get_base1_lhs(K,3,3,"K",1), -(k21));
            current_statement_begin__ = 66;
            stan::math::assign(x, linOdeModel(time,amt,rate,ii,evid,cmt,addl,ss,K,biovar,tlag));
            current_statement_begin__ = 69;
            stan::math::assign(cHat, elt_divide(col(x,2),V1));
            current_statement_begin__ = 71;
            for (int i = 1; i <= nObs; ++i) {

                current_statement_begin__ = 72;
                stan::math::assign(get_base1_lhs(cHatObs,i,"cHatObs",1), get_base1(cHat,get_base1(iObs,i,"iObs",1),"cHat",1));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < 3; ++i0__) {
            for (int i1__ = 0; i1__ < 3; ++i1__) {
                if (stan::math::is_uninitialized(K(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: K" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        if (stan::math::is_uninitialized(k10)) {
            std::stringstream msg__;
            msg__ << "Undefined transformed parameter: k10";
            throw std::runtime_error(msg__.str());
        }
        if (stan::math::is_uninitialized(k12)) {
            std::stringstream msg__;
            msg__ << "Undefined transformed parameter: k12";
            throw std::runtime_error(msg__.str());
        }
        if (stan::math::is_uninitialized(k21)) {
            std::stringstream msg__;
            msg__ << "Undefined transformed parameter: k21";
            throw std::runtime_error(msg__.str());
        }
        for (int i0__ = 0; i0__ < nt; ++i0__) {
            if (stan::math::is_uninitialized(cHat(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: cHat" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < nObs; ++i0__) {
            if (stan::math::is_uninitialized(cHatObs(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: cHatObs" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < nt; ++i0__) {
            for (int i1__ = 0; i1__ < 3; ++i1__) {
                if (stan::math::is_uninitialized(x(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: x" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning
        check_greater_or_equal(function__,"cHat",cHat,0);
        check_greater_or_equal(function__,"cHatObs",cHatObs,0);
        check_greater_or_equal(function__,"x",x,0);

        // model body
        try {

            current_statement_begin__ = 78;
            lp_accum__.add(lognormal_log<propto__>(CL, log(10), 0.25));
            current_statement_begin__ = 79;
            lp_accum__.add(lognormal_log<propto__>(Q, log(15), 0.5));
            current_statement_begin__ = 80;
            lp_accum__.add(lognormal_log<propto__>(V1, log(35), 0.25));
            current_statement_begin__ = 81;
            lp_accum__.add(lognormal_log<propto__>(V2, log(105), 0.5));
            current_statement_begin__ = 82;
            lp_accum__.add(lognormal_log<propto__>(ka, log(2.5), 1));
            current_statement_begin__ = 83;
            lp_accum__.add(cauchy_log<propto__>(sigma, 0, 1));
            current_statement_begin__ = 85;
            lp_accum__.add(normal_log<propto__>(logCObs, log(cHatObs), sigma));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("CL");
        names__.push_back("Q");
        names__.push_back("V1");
        names__.push_back("V2");
        names__.push_back("ka");
        names__.push_back("sigma");
        names__.push_back("K");
        names__.push_back("k10");
        names__.push_back("k12");
        names__.push_back("k21");
        names__.push_back("cHat");
        names__.push_back("cHatObs");
        names__.push_back("x");
        names__.push_back("cObsPred");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nObs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nObs);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "LinTwoCptModel_model_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        double CL = in__.scalar_lb_constrain(0);
        double Q = in__.scalar_lb_constrain(0);
        double V1 = in__.scalar_lb_constrain(0);
        double V2 = in__.scalar_lb_constrain(0);
        double ka = in__.scalar_lb_constrain(0);
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(CL);
        vars__.push_back(Q);
        vars__.push_back(V1);
        vars__.push_back(V2);
        vars__.push_back(ka);
        vars__.push_back(sigma);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        matrix_d K(static_cast<Eigen::VectorXd::Index>(3),static_cast<Eigen::VectorXd::Index>(3));
        (void) K;  // dummy to suppress unused var warning
        stan::math::initialize(K, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(K,DUMMY_VAR__);
        double k10(0.0);
        (void) k10;  // dummy to suppress unused var warning
        stan::math::initialize(k10, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(k10,DUMMY_VAR__);
        stan::math::assign(k10,(CL / V1));
        double k12(0.0);
        (void) k12;  // dummy to suppress unused var warning
        stan::math::initialize(k12, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(k12,DUMMY_VAR__);
        stan::math::assign(k12,(Q / V1));
        double k21(0.0);
        (void) k21;  // dummy to suppress unused var warning
        stan::math::initialize(k21, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(k21,DUMMY_VAR__);
        stan::math::assign(k21,(Q / V2));
        vector_d cHat(static_cast<Eigen::VectorXd::Index>(nt));
        (void) cHat;  // dummy to suppress unused var warning
        stan::math::initialize(cHat, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(cHat,DUMMY_VAR__);
        vector_d cHatObs(static_cast<Eigen::VectorXd::Index>(nObs));
        (void) cHatObs;  // dummy to suppress unused var warning
        stan::math::initialize(cHatObs, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(cHatObs,DUMMY_VAR__);
        matrix_d x(static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(3));
        (void) x;  // dummy to suppress unused var warning
        stan::math::initialize(x, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(x,DUMMY_VAR__);


        try {
            current_statement_begin__ = 54;
            stan::math::assign(K, rep_matrix(0,3,3));
            current_statement_begin__ = 56;
            stan::math::assign(get_base1_lhs(K,1,1,"K",1), -(ka));
            current_statement_begin__ = 57;
            stan::math::assign(get_base1_lhs(K,2,1,"K",1), ka);
            current_statement_begin__ = 58;
            stan::math::assign(get_base1_lhs(K,2,2,"K",1), -((k10 + k12)));
            current_statement_begin__ = 59;
            stan::math::assign(get_base1_lhs(K,2,3,"K",1), k21);
            current_statement_begin__ = 60;
            stan::math::assign(get_base1_lhs(K,3,2,"K",1), k12);
            current_statement_begin__ = 61;
            stan::math::assign(get_base1_lhs(K,3,3,"K",1), -(k21));
            current_statement_begin__ = 66;
            stan::math::assign(x, linOdeModel(time,amt,rate,ii,evid,cmt,addl,ss,K,biovar,tlag));
            current_statement_begin__ = 69;
            stan::math::assign(cHat, elt_divide(col(x,2),V1));
            current_statement_begin__ = 71;
            for (int i = 1; i <= nObs; ++i) {

                current_statement_begin__ = 72;
                stan::math::assign(get_base1_lhs(cHatObs,i,"cHatObs",1), get_base1(cHat,get_base1(iObs,i,"iObs",1),"cHat",1));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        check_greater_or_equal(function__,"cHat",cHat,0);
        check_greater_or_equal(function__,"cHatObs",cHatObs,0);
        check_greater_or_equal(function__,"x",x,0);

        // write transformed parameters
        for (int k_1__ = 0; k_1__ < 3; ++k_1__) {
            for (int k_0__ = 0; k_0__ < 3; ++k_0__) {
                vars__.push_back(K(k_0__, k_1__));
            }
        }
        vars__.push_back(k10);
        vars__.push_back(k12);
        vars__.push_back(k21);
        for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
            vars__.push_back(cHat[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < nObs; ++k_0__) {
            vars__.push_back(cHatObs[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < 3; ++k_1__) {
            for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
                vars__.push_back(x(k_0__, k_1__));
            }
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        vector<double> cObsPred(nObs, 0.0);
        stan::math::initialize(cObsPred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(cObsPred,DUMMY_VAR__);


        try {
            current_statement_begin__ = 91;
            for (int i = 1; i <= nObs; ++i) {

                current_statement_begin__ = 92;
                stan::math::assign(get_base1_lhs(cObsPred,i,"cObsPred",1), exp(normal_rng(log(get_base1(cHatObs,i,"cHatObs",1)),sigma, base_rng__)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < nObs; ++k_0__) {
            vars__.push_back(cObsPred[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "LinTwoCptModel_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "CL";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Q";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "V1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "V2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ka";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= 3; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= 3; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "K" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "k10";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "k12";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "k21";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cHat" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nObs; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cHatObs" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= 3; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= nObs; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cObsPred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "CL";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Q";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "V1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "V2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ka";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= 3; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= 3; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "K" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "k10";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "k12";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "k21";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cHat" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nObs; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cHatObs" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= 3; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= nObs; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cObsPred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

} // namespace

typedef LinTwoCptModel_model_namespace::LinTwoCptModel_model stan_model;

